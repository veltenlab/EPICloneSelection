configfile: "config.yaml"

import pandas as pd
import subprocess

sras = config['sras']
samples = config['samples']
sample_map = pd.read_csv(config['sample_map'])

rule all:
    input:
        expand("../data/external/Cabezas/raw/{sra}/fastq/",sra=sras),
        expand("../data/external/Cabezas/raw/{sra}/trimmed/{sra}_1_val_1.fq",sra=sras),
        expand("../data/external/Cabezas/raw/{sra}/mapped/{sra}.bam/{sra}_1_bismark_bt2_pe.bam",sra=sras),
        expand("../data/external/Cabezas/raw/{sample}/merged/merged.bam",sample=samples),
        expand("../data/external/Cabezas/raw/{sample}/merged/merged_sorted.bam",sample=samples),
        expand("../data/external/Cabezas/raw/{sample}/extract/",sample=samples),
        "../data/external/Cabezas/raw/rnbeads/report/",
	    "../data/external/Cabezas/raw/DMRs/high_filtered_HSC.csv",
	    expand("../data/external/Cabezas/raw/WSH/{sample}/PDR/", sample=samples),
	    "../data/external/Cabezas/raw/IMCs/",
	    expand("../data/external/Cabezas/raw/WSH/{sample}/qFDRP/", sample=samples),
        "../data/external/Cabezas/raw/meth_unmeth/",
        "../data/external/Cabezas/raw/uncut/",
        "../data/external/Cabezas/raw/final_panel/"

rule download:
    output:
        folder = "../data/external/Cabezas/raw/{sra}/fastq/",
        first = "../data/external/Cabezas/raw/{sra}/fastq/{sra}_1.fastq",
        second = "../data/external/Cabezas/raw/{sra}/fastq/{sra}_2.fastq"
    params:
        s = "{sra}",
        max_size = "50G"
    log:
        "../data/external/Cabezas/raw/{sra}/fastq/{sra}.log"
    conda:
        "sra.yml"
    shell:
        "echo Start {params.s} ; " 
        "prefetch {params.s} --output-directory {output.folder} --max-size {params.max_size} ; "
        "fastq-dump --split-3 {output.folder}/{params.s}/{params.s}.sra -O {output.folder} ; "
        "rm -rf {output.folder}/{params.s}/{params.s}.sra ; "
        "2> {log}"

rule trim:
    input:
        first = "../data/external/Cabezas/raw/{sra}/fastq/{sra}_1.fastq",
        second = "../data/external/Cabezas/raw/{sra}/fastq/{sra}_2.fastq"
    output:
        folder = "../data/external/Cabezas/raw/{sra}/trimmed/",
        first = "../data/external/Cabezas/raw/{sra}/trimmed/{sra}_1_val_1.fq",
        second = "../data/external/Cabezas/raw/{sra}/trimmed/{sra}_2_val_2.fq"
    conda:
        "genotools.yml"
    log:
        "../data/external/Cabezas/raw/{sra}/trimmed/{sra}.log"
    shell:
        "trim_galore --nextera --paired {input.first} {input.second} -o {output} ; "
        #"rm -rf {input.first}; rm -rf {input.second} ; "
        "rm -rf {output.folder}*_1_val_1_val_1.fq; rm -rf {output.folder}*_2_val_2_val_2.fq ; "
        "2> {log}"

rule bismark:
    input:
        ref = "../references/mm10/",
        first = "../data/external/Cabezas/raw/{sra}/trimmed/{sra}_1_val_1.fq",
        second = "../data/external/Cabezas/raw/{sra}/trimmed/{sra}_2_val_2.fq"
    output:
        "../data/external/Cabezas/raw/{sra}/mapped/{sra}.bam/{sra}_1_bismark_bt2_pe.bam"
    conda:
        "bismark.yml"
    threads:
        4
    log:
        "../data/external/Cabezas/raw/{sra}/mapped/{sra}.log"
    params:
        threads = 4,
        s = "{sra}"
    shell:
        "if [ ! -d tmp ] ; then mkdir tmp ; fi ; "
        "if [ ! -d tmp/{params.s} ] ; then mkdir tmp/{params.s} ; fi ; "
        "bismark --bowtie2 {input.ref} -1 {input.first} -2 {input.second} -o {output} --temp_dir tmp/{params.s} -p {params.threads} ; "
        #"rm -rf {input.first}; rm -rf {input.second} ; "
        "2> {log}"

rule merge:
    input:
        geo_acc = config['sample_map'],
        aligned = expand("../data/external/Cabezas/raw/{sra}/mapped/{sra}.bam/{sra}_1_bismark_bt2_pe.bam", sra=sras)        
    output:
        merged = "../data/external/Cabezas/raw/{sample}/merged/merged.bam"
    params:
        s = "{sample}",
        max_size = "50G",
	folder = "../data/external/Cabezas/raw/" 
    log:
        "../data/external/Cabezas/raw/{sample}/fastq/{sample}.log"
    run:
        srrs = sample_map[sample_map['GEO_Accession (exp)']==params.s]['Run']
        all_bams = " "
        for srr in srrs:
            all_bams = all_bams + params.folder + "/" + srr + "/mapped/" + srr + ".bam/" + srr + "_1_bismark_bt2_pe.bam/" + srr + "_1_val_1_bismark_bt2_pe.bam "

        merge_cmd = "samtools merge " + output.merged + all_bams + " -n"
        proc = subprocess.run(merge_cmd,shell=True)
        #cleanup = "rm -rf " + params.folder + "SRR*"
        #proc = subprocess.run(cleanup,shell=True)

rule sort_index:
    input:
        "../data/external/Cabezas/raw/{sample}/merged/merged.bam"
    output:
        "../data/external/Cabezas/raw/{sample}/merged/merged_sorted.bam"
    conda:
        "/users/lvelten/mscherer/conda/envs/bismark.yml"
    params:
        s = "{sample}"
    shell:
        "samtools sort {input} -o ../data/external/Cabezas/raw/{params.s}/merged/merged_sorted.bam ; "
        "samtools index ../data/external/Cabezas/raw/{params.s}/merged/merged_sorted.bam"

rule bismark_extract:
    input:
        "../data/external/Cabezas/raw/{sample}/merged/merged.bam"
    output:
        "../data/external/Cabezas/raw/{sample}/extract/"
    conda:
        "bismark.yml"
    log:
        "../data/external/Cabezas/raw/{sample}/trimmed/{sample}.log"
    params:
        threads = 10,
        genome = "../references/mm10/",
        s = "{sample}"
    shell:
        "bismark_methylation_extractor {input} -o {output} --parallel {params.threads} --comprehensive --bedGraph --cytosine_report --no_overlap --genome_folder {params.genome} ;  "
        "rm -rf ../data/external/Cabezas/raw/{params.s}/extract/*_context_merged.txt ; "

rule rnbeads:
    input:
        expand("../data/external/Cabezas/raw/{sample}/extract/", sample=samples)
    output:
        "../data/external/Cabezas/raw/rnbeads/report/"
    conda:
        "rnbeads.yml"
    log:
        "../data/external/Cabezas/raw/rnbeads/rnbeads.log"
    params:
        script = "../RnBeads/script.R"
    shell:
        "cp -s ../data/external/Cabezas/raw/*/extract/*.cov.gz ../data/external/Cabezas/raw/rnbeads/data/"
        "Rscript {params.script}"

rule select_dmrs:
    input:
        "../data/external/Cabezas/raw/rnbeads/report/"
    output:
        "../data/external/Cabezas/raw/DMRs/high_filtered_HSC.csv"
    conda:
        "rnbeads.yml"
    log:
        "../data/external/Cabezas/raw/DMRs/dmrs.log"
    params:
        config = "../config.yaml"
    shell:
        "Rscript scripts/select_reliable_DMRs.R --report {input} --output {output} --config {params.config}"

rule compute_pdr:
    input:
        "../data/external/Cabezas/raw/{sample}/merged/merged_sorted.bam"
    output:
        "../data/external/Cabezas/raw/WSH/{sample}/PDR/"
    conda:
        "rnbeads.yml"
    log:
        "../data/external/Cabezas/raw/WSH/{sample}/PDR/pdr.log"
    params:
	    s = "{sample}"
    shell:
        "Rscript WSHScripts/scores/PDR/compute_PDR.R PDR_{params.s} {output} {input} ../data/external/Cabezas/raw/rnbeads/report/cluster_run/preprocessing_RnBSet/ 6"

rule compute_imcs:
    input:
        "../data/external/Cabezas/raw/rnbeads/report/"
    output:
        "../data/external/Cabezas/raw/IMCs/"
    conda:
        "rnbeads.yml"
    log:
        "../data/external/Cabezas/IMCs/imc.log"
    shell:
        "Rscript IMC/findIMC.R --rnbset {input}/cluster_run/preprocessing_RnBSet/ --output {output} --dmrs ../data/external/Cabezas/raw/DMRs/ --pdrs ../data/external/Cabezas/raw/WSH/"

rule compute_qfdrp:
    input:
        "../data/external/Cabezas/raw/{sample}/merged/merged_sorted.bam"
    output:
        "../data/external/Cabezas/raw/WSH/{sample}/qFDRP/"
    conda:
        "rnbeads.yml"
    log:
        "../data/external/Cabezas/raw/WSH/{sample}/qFDRP/pdr.log"
    params:
	    s = "{sample}"
    shell:
        "Rscript WSHScripts/scores/qFDRP/compute_qFDRP.R qFDRP_{params.s} {output} {input} ../data/external/Cabezas/raw/rnbeads/report/cluster_run/preprocessing_RnBSet/ 6"

rule generate_always_meth_unmeth:
    input:
        "../data/external/Cabezas/raw/rnbeads/report/"
    output:
        "../data/external/Cabezas/raw/meth_unmeth/"
    conda:
        "rnbeads.yml"
    log:
        "../data/external/Cabezas/raw/meth_unmeth/always_meth_unmeth.log"
    params:
        config = "../config.yaml"
    shell:
        "Rscript scripts/select_always_meth_unmeth.R --report {input} --output {output} --config {params.config}"

rule generate_uncut:
    input:
        "../data/external/Cabezas/raw/rnbeads/report/"
    output:
        "../data/external/Cabezas/raw/uncut/"
    conda:
        "rnbeads.yml"
    log:
        "../data/external/Cabezas/raw/uncut/create_uncut.log"
    params:
        config = "../config.yaml"
    shell:
        "Rscript scripts/construct_non_cut.R --output {output} --config {params.config}"

rule generate_panel:
    input:
        wsh = expand("../data/external/Cabezas/raw/WSH/{sample}/qFDRP/", sample=samples),
        imc = "../data/external/Cabezas/raw/IMCs/",
        dmr = "../data/external/Cabezas/raw/DMRs/high_filtered_HSC.csv",
        noncut = "../data/external/Cabezas/raw/uncut/",
        always = "../data/external/Cabezas/raw/meth_unmeth/"
    output:
        "../data/external/Cabezas/raw/final_panel/"
    conda:
        "rnbeads.yml"
    log:
        "../data/external/Cabezas/raw/final_panel/create_panel.log"
    shell:
        "Rscript scripts/generate_final_panel.R --dmrs ../data/external/Cabezas/raw/DMRs/ --imc {input.imc} --wsh ../data/external/Cabezas/raw/WSH/ --noncut {input.noncut} --always {input.always} --output {output}"

